<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | Определяет драйвер сессий по умолчанию, который будет использоваться
    | для обработки запросов. По умолчанию используется легкий native драйвер,
    | но можно выбрать любой другой.
    |
    | Поддерживаемые драйверы: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */
    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Количество минут, в течение которых сессия может оставаться неактивной
    | до её истечения. Если нужно сразу завершать сессии при закрытии браузера,
    | установите соответствующий параметр.
    |
    */
    'lifetime' => env('SESSION_LIFETIME', 120),
    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | Позволяет зашифровать все данные сессии перед сохранением. Laravel
    | автоматически выполняет шифрование, и сессии можно использовать
    | как обычно.
    |
    */
    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | Если используется native драйвер сессий, укажите путь для хранения
    | файлов сессий. По умолчанию задан путь, можно изменить.
    |
    */
    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | Для драйверов "database" или "redis" можно указать соединение
    | с базой данных для хранения сессий.
    |
    */
    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | Таблица для хранения сессий при использовании database драйвера.
    | По умолчанию используется "sessions".
    |
    */
    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | Для кэш-драйверов сессий укажите store, который будет использоваться.
    | Должен совпадать с одним из настроенных кэш-хранилищ.
    |
    | Влияет на: "apc", "dynamodb", "memcached", "redis"
    |
    */
    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Некоторые драйверы сессий требуют периодической очистки старых сессий.
    | Здесь задаются шансы выполнения очистки на каждом запросе. По умолчанию
    | 2 из 100.
    |
    */
    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Имя cookie, которое идентифицирует сессию. Используется для всех драйверов.
    |
    */
    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | Путь cookie, по которому она будет доступна. Обычно это корень приложения.
    |
    */
    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Домен cookie, который идентифицирует сессию. Определяет, для каких доменов
    | cookie доступна.
    |
    */
    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | Если true, cookie будет передаваться только по HTTPS соединению.
    |
    */
    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Если true, JavaScript не сможет получить доступ к cookie.
    |
    */
    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | Определяет поведение cookie при кросс-сайтовых запросах для защиты
    | от CSRF атак. По умолчанию "lax".
    |
    | Поддерживаемые значения: "lax", "strict", "none", null
    |
    */
    'same_site' => 'lax',

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Если true, cookie привязывается к верхнему уровню сайта для кросс-сайтового
    | контекста. Требуется secure + same_site="none".
    |
    */
    'partitioned' => false,

];
